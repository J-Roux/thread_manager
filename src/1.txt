#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef void(*Func)();


#define REGISTER(FUNC, ARGS) jmp_buf _##FUNC; void FUNC(ARGS)

#define YIELD(context)  setjmp(context) == 0 ? longjmp(k, __COUNTER__) : printf("Error"); 

REGISTER(f1, void);
REGISTER(f2, void);

jmp_buf k;

jmp_buf exit;

void kernel(jmp_buf ** contexts, int len)
{
	int r = 0;
	if(setjmp(k) == 0)
		f1();
	if (setjmp(k) == 0)
		f2(); 
	for(int i = 0; i < len; )
	{
		r = setjmp(k);
		if (r != 0)
			i =  (i + 1) % len;
		longjmp(*contexts[i], __COUNTER__);
	}
}


void f1()
{
	if(setjmp(_f1) == 0)
		longjmp(k, __COUNTER__);
	printf("\nf1 one");
	
	if (setjmp(_f1) == 0)
		longjmp(k, __COUNTER__);
	printf("\nf1 two");


}

void f2()
{
	if (setjmp(_f2) == 0)
		longjmp(k, __COUNTER__);;
	printf("\nf2 one");

	if (setjmp(_f2) == 0)
		longjmp(k, __COUNTER__);;
	printf("\nf2 two");

}


int main()
{
	jmp_buf exit;
	
	jmp_buf **p;
	p = (jmp_buf **)malloc(2 * sizeof(jmp_buf*));
	p[0] = &_f1;
	p[1] = &_f2;
	kernel(p, 2);
	

	


	return 0;
}